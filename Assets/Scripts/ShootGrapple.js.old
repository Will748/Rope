#pragma strict
import System.Collections.Generic;

var prefabGrapple:GameObject;
var range = 100.0;
var distanceFromCamera = 10;
var player : GameObject;
var grappleJumpUp = 200.0;
var grappleJumpForward = 200.0;
var rayCutOffLength = 0.2;
var grappleSpawnPoint : Transform;
private var i = 0;
static var grapplePositions = new List.<Vector3>();
private var swingDirs = new List.<int>();
private var angle : float;
static var hasShot = false;
var f = 0;
var finalAngle = 0;
var swingDir = 0;
var count = 0;
var farAway : boolean;
var gTrigger : GameObject;
private var InstanceGTrigger : GameObject;
private var InstanceGrapple : GameObject;

function Awake(){

	if(!player) player = GameObject.FindWithTag("Player");
	if(!grappleSpawnPoint) grappleSpawnPoint = player.transform;
}
	
function Update ()
{
	//on mouse click ...
	if(Input.GetButtonDown("Fire1") && hasShot == false && Movement.rotated)
	{
		var mousePosition = Input.mousePosition;
		mousePosition.z = distanceFromCamera;
		var worldMousePosition = Camera.main.ScreenToWorldPoint(mousePosition);
		var hit : RaycastHit;
		if(Physics.Raycast(transform.position, worldMousePosition-transform.position, hit, range))
		{
			if(hit.collider.tag != "gTrigger"){
				//var InstanceGrapple = Instantiate(prefabGrapple, hit.point, Quaternion.identity);
				InstanceGrapple = Instantiate(prefabGrapple, grappleSpawnPoint.position, Quaternion.identity);
				var joint = InstanceGrapple.GetComponent(ConfigurableJoint);
				var distance = Vector3.Distance(player.transform.position, hit.point);
				joint.connectedBody = player.GetComponent.<Rigidbody>();
				joint.linearLimit.limit = distance;
				joint.xMotion = ConfigurableJointMotion.Limited;
				joint.yMotion = ConfigurableJointMotion.Limited;
				InstanceGrapple.transform.position = hit.point;
				//var gTriggerSP = (InstanceGrapple.transform.position + player.transform.position)/2;
				//InstanceGTrigger = Instantiate(gTrigger, gTriggerSP, Quaternion.LookRotation(InstanceGrapple.transform.position));  
				if(hit.collider.transform.rotation.x == 0.5)
				{
					Debug.Log("2");
					hasShot = true;
					Movement.lerp = true;	    			
				}
				else if(hit.collider.gameObject.tag == "Enemy")
				{
					InstanceGrapple.transform.position.x = GameObject.Find("Enemy").transform.position.x;
					InstanceGrapple.transform.position.y = GameObject.Find("Enemy").transform.position.y;
					EnemyMovement.lerp = true;
					EnemyMovement.allowMovement = false;
					InstanceGrapple.GetComponent.<Rigidbody>().constraints &= ~RigidbodyConstraints.FreezePositionX;	
				
				}
				else{
					//player.rigidbody.constraints &= ~RigidbodyConstraints.FreezeRotationZ;
					hasShot = true;
					Movement.hasShot = true;
				}
				//StartCoroutine("Raycastcheck");
				//InvokeRepeating("Raycastcheck",0.0,0.1);
			}
		}
	}
			
	else if(Input.GetButtonDown("Fire1") && hasShot)
	{
		if(EnemyMovement.lerp)EnemyMovement.lerp = false;
		Destroy(InstanceGTrigger);
		disableGrapple();							
	}

	/*if(hasShot == true){
		InstanceGTrigger.transform.position = (InstanceGrapple.transform.position + player.transform.position)/2;
		InstanceGTrigger.transform.Translate(0,0.15,0);
		InstanceGTrigger.transform.LookAt(InstanceGrapple.transform.position);
		InstanceGTrigger.transform.Rotate(90,0,0);
		InstanceGTrigger.GetComponent(CapsuleCollider).height = Vector3.Distance(InstanceGrapple.transform.position, player.transform.position) - 0.5;
	}*/
	
	if(Input.GetKey("y")){
		StartCoroutine("printPos");
	}

	
	/*if(Input.GetButtonDown("Jump") && Movement.hasShot
	&& Physics.Raycast(transform.position, -Vector3.up, player.collider.bounds.extents.y + 0.1) == false){
		disableGrapple();
		player.rigidbody.AddForce(Vector3.up * grappleJumpUp);
		if(player.rigidbody.velocity.x > 0)player.rigidbody.AddForce(Vector3.right * grappleJumpForward);
		if(player.rigidbody.velocity.x < 0)player.rigidbody.AddForce(Vector3.left * grappleJumpForward);
	}*/	
}

function FixedUpdate(){
	var hit : RaycastHit;
	//var count = 0;
	if(Movement.hasShot){
		//Debug.Log("running");
		count++;
		var rayRange = Vector3.Distance(GameObject.FindWithTag("Grapple").transform.position,
										player.transform.position);
		rayRange -= rayCutOffLength;
		if(Vector3.Distance(hit.point, GameObject.FindWithTag("Grapple").transform.position) > 1)
			farAway = true;
		else
			farAway = false;
		var rsp = GameObject.FindWithTag("Grapple").transform.position;
		//rsp.y -=0.2;
		if(/*Physics.Linecast(player.transform.position, 
	    GameObject.FindWithTag("Grapple").transform.position -Vector3(0.2,0.2,0),hit)*/
	     count >= 10 && Physics.Raycast(rsp, 
	     player.transform.position - GameObject.FindWithTag("Grapple").transform.position,
	     hit, rayRange) && hit.collider.tag != "Player" && hit.collider.tag != "Drum" && farAway
	     ){
	     	Debug.Log("hit");
	     	//hit.collider.tag = "used";	    
	    	if(player.GetComponent.<Rigidbody>().velocity.x < 0)swingDir = 1;
	    	if(player.GetComponent.<Rigidbody>().velocity.x > 0)swingDir = 2;
	   		grapplePositions.Add(GameObject.FindWithTag("Grapple").transform.position);
	   		swingDirs.Add(swingDir);				
	    	i += 1;
	    	f += 1;
	    	var done = true;
	    	//var angle = Vector3.Angle(Vector3.right,
	    	//GameObject.FindWithTag("Grapple").transform.position - hit.point);
			moveGrapple(hit.point);
			DrawGrappleLine.getLinePositions();
			//done = false;				//yield WaitForSeconds(1);

			//StopCoroutine("Raycastcheck");
		}
		try{
			var swingDir2 = swingDirs[i-1];
			var prevGrapPos = grapplePositions[i-1];
			}
		catch(e){
			//Debug.Log(e.Message);
			return;
		}
		if(done == true){
			angle = Vector3.Angle(Vector3.right, 
			prevGrapPos - gameObject.FindWithTag("Grapple").transform.position);
			finalAngle = Vector3.Angle(Vector3.right,
			GameObject.FindWithTag("Grapple").transform.position - player.transform.position);
			if(swingDir2 == 1 && finalAngle > angle + 4){
				i -= 1;
				try{
					moveGrapple(prevGrapPos);
					grapplePositions.RemoveAt(i);
					swingDirs.RemoveAt(i);
				}
				catch(e){
					StopCoroutine("RaycastCheck2");
					return;
				}
			DrawGrappleLine.getLinePositions();

			//done = true;
			//yield;			
			//StopCoroutine("RaycastCheck2");
			}
			if(swingDir2 == 2 && finalAngle < angle - 4){
				try{
					i -= 1;
					moveGrapple(prevGrapPos);
					grapplePositions.RemoveAt(i);
					swingDirs.RemoveAt(i);
				}
				catch(e){
					return;
				}
			DrawGrappleLine.getLinePositions();
			}

			//if(grapplePositions.Count)	
			//yield;
			//StopCoroutine("RaycastCheck2");		
		}
	}
}
	
	
function printPos(){

	for(swingDir in swingDirs){
		Debug.Log(swingDir);
		Debug.Log(swingDirs.Count);
		yield;
	}
	for(grapPos in grapplePositions){
		Debug.Log(grapplePositions.Count);
		Debug.Log(grapPos);
		yield;
	}
}

function disableGrapple(){
	StopCoroutine("RaycastCheck");
	grapplePositions.Clear();
	swingDirs.Clear();
	i = 0;
	DrawGrappleLine.i = 2;
	DrawGrappleLine.n = 0;
	Movement.hasShot = false;
	hasShot = false;
	Destroy(GameObject.FindWithTag("Grapple")); 
	Destroy(player.GetComponent(ConfigurableJoint));
	player.GetComponent.<Rigidbody>().constraints = RigidbodyConstraints.FreezeAll;
	player.GetComponent.<Rigidbody>().constraints &= ~RigidbodyConstraints.FreezePositionX;	
	player.GetComponent.<Rigidbody>().constraints &= ~RigidbodyConstraints.FreezePositionY;
	player.GetComponent.<Rigidbody>().useGravity = true;
}

function Raycastcheck(){
	var hit : RaycastHit;
	//var count = 0;
	while(Movement.hasShot){
		Debug.Log("running");
		count++;
		var rayRange = Vector3.Distance(GameObject.FindWithTag("Grapple").transform.position,
										player.transform.position);
		rayRange -= rayCutOffLength;
		if(Vector3.Distance(hit.point, GameObject.FindWithTag("Grapple").transform.position) > 1)
			farAway = true;
		else
			farAway = false;
		var rsp = GameObject.FindWithTag("Grapple").transform.position;
		//rsp.y -=0.2;
		if(/*Physics.Linecast(player.transform.position, 
	    GameObject.FindWithTag("Grapple").transform.position -Vector3(0.2,0.2,0),hit)*/
	     count >= 10 && Physics.Raycast(rsp, 
	     player.transform.position - GameObject.FindWithTag("Grapple").transform.position,
	     hit, rayRange) && hit.collider.tag != "Player" && hit.collider.tag != "Drum" && farAway
	     ){
	     	Debug.Log("hit");
	     	hit.collider.tag = "used";	    
	    	if(player.GetComponent.<Rigidbody>().velocity.x < 0)swingDir = 1;
	    	if(player.GetComponent.<Rigidbody>().velocity.x > 0)swingDir = 2;
	   		grapplePositions.Add(GameObject.FindWithTag("Grapple").transform.position);
	   		swingDirs.Add(swingDir);				
	    	i += 1;
	    	f += 1;
	    	//var angle = Vector3.Angle(Vector3.right,
	    	//GameObject.FindWithTag("Grapple").transform.position - hit.point);
			moveGrapple(hit.point);
			DrawGrappleLine.getLinePositions();
			//done = false;	
			StartCoroutine("RaycastCheck2");
			//yield WaitForSeconds(1);

			//StopCoroutine("Raycastcheck");
		}
		//StopCoroutine("Raycastcheck");
		yield;
	}
}

function RaycastCheck2(){
	while(Movement.hasShot){
		try{
			var swingDir2 = swingDirs[i-1];
			var prevGrapPos = grapplePositions[i-1];
			}
		catch(e){
			Debug.Log(e.Message);
			StopCoroutine("RaycastCheck2");
			return;
		}
		angle = Vector3.Angle(Vector3.right, 
		prevGrapPos - gameObject.FindWithTag("Grapple").transform.position);
		finalAngle = Vector3.Angle(Vector3.right,
		GameObject.FindWithTag("Grapple").transform.position - player.transform.position);
		if(swingDir2 == 1 && finalAngle > angle + 4){
			i -= 1;
			try{
				moveGrapple(prevGrapPos);
				grapplePositions.RemoveAt(i);
				swingDirs.RemoveAt(i);
			}
			catch(e){
				StopCoroutine("RaycastCheck2");
				return;
			}
		DrawGrappleLine.getLinePositions();

			//done = true;
			//yield;			
			//StopCoroutine("RaycastCheck2");
		}
		if(swingDir2 == 2 && finalAngle < angle - 4){
			try{
				i -= 1;
				moveGrapple(prevGrapPos);
				grapplePositions.RemoveAt(i);
				swingDirs.RemoveAt(i);
			}
			catch(e){
				StopCoroutine("RaycastCheck2");
				return;
			}
		DrawGrappleLine.getLinePositions();

			//if(grapplePositions.Count)	
			//yield;
			//StopCoroutine("RaycastCheck2");		
		}
		yield;
	}
}

function moveGrapple(movePos : Vector3){
	var distance = Vector3.Distance(player.transform.position, movePos);
	GameObject.FindWithTag("Grapple").transform.position = grappleSpawnPoint.position;				
	GameObject.FindWithTag("Grapple").GetComponent(ConfigurableJoint).linearLimit.limit = distance;
	GameObject.FindWithTag("Grapple").transform.position = movePos;
}
